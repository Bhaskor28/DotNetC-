Hereâ€™s a list of common **built-in methods** for the `List<T>` class in C# with simple examples:

---

### 1. **Add**  
Adds an element to the list.  
```csharp
List<int> numbers = new List<int>();
numbers.Add(10);
Console.WriteLine(numbers[0]); // Output: 10
```

---

### 2. **AddRange**  
Adds a collection of elements to the list.  
```csharp
List<int> numbers = new List<int> { 1, 2 };
numbers.AddRange(new int[] { 3, 4 });
Console.WriteLine(string.Join(", ", numbers)); // Output: 1, 2, 3, 4
```

---

### 3. **Insert**  
Inserts an element at a specific index.  
```csharp
List<int> numbers = new List<int> { 1, 3 };
numbers.Insert(1, 2);
Console.WriteLine(string.Join(", ", numbers)); // Output: 1, 2, 3
```

---

### 4. **Remove**  
Removes the first occurrence of a specific element.  
```csharp
List<int> numbers = new List<int> { 1, 2, 3 };
numbers.Remove(2);
Console.WriteLine(string.Join(", ", numbers)); // Output: 1, 3
```

---

### 5. **RemoveAt**  
Removes the element at a specific index.  
```csharp
List<int> numbers = new List<int> { 1, 2, 3 };
numbers.RemoveAt(1);
Console.WriteLine(string.Join(", ", numbers)); // Output: 1, 3
```

---

### 6. **RemoveAll**  
Removes all elements that match a condition.  
```csharp
List<int> numbers = new List<int> { 1, 2, 3, 4 };
numbers.RemoveAll(n => n % 2 == 0); // Remove even numbers
Console.WriteLine(string.Join(", ", numbers)); // Output: 1, 3
```

---

### 7. **Contains**  
Checks if the list contains a specific element.  
```csharp
List<int> numbers = new List<int> { 1, 2, 3 };
Console.WriteLine(numbers.Contains(2)); // Output: True
```

---

### 8. **IndexOf**  
Returns the index of the first occurrence of an element.  
```csharp
List<int> numbers = new List<int> { 1, 2, 3 };
Console.WriteLine(numbers.IndexOf(2)); // Output: 1
```

---

### 9. **Count**  
Gets the number of elements in the list.  
```csharp
List<int> numbers = new List<int> { 1, 2, 3 };
Console.WriteLine(numbers.Count); // Output: 3
```

---

### 10. **Sort**  
Sorts the list in ascending order.  
```csharp
List<int> numbers = new List<int> { 3, 1, 2 };
numbers.Sort();
Console.WriteLine(string.Join(", ", numbers)); // Output: 1, 2, 3
```

---

### 11. **Reverse**  
Reverses the order of the list.  
```csharp
List<int> numbers = new List<int> { 1, 2, 3 };
numbers.Reverse();
Console.WriteLine(string.Join(", ", numbers)); // Output: 3, 2, 1
```

---

### 12. **Clear**  
Removes all elements from the list.  
```csharp
List<int> numbers = new List<int> { 1, 2, 3 };
numbers.Clear();
Console.WriteLine(numbers.Count); // Output: 0
```

---

### 13. **Find**  
Finds the first element that matches a condition.  
```csharp
List<int> numbers = new List<int> { 1, 2, 3, 4 };
int result = numbers.Find(n => n > 2);
Console.WriteLine(result); // Output: 3
```

---

### 14. **FindAll**  
Finds all elements that match a condition.  
```csharp
List<int> numbers = new List<int> { 1, 2, 3, 4 };
List<int> result = numbers.FindAll(n => n > 2);
Console.WriteLine(string.Join(", ", result)); // Output: 3, 4
```

---

### 15. **FindIndex**  
Finds the index of the first element that matches a condition.  
```csharp
List<int> numbers = new List<int> { 1, 2, 3, 4 };
int index = numbers.FindIndex(n => n > 2);
Console.WriteLine(index); // Output: 2
```

---

### 16. **ToArray**  
Converts the list to an array.  
```csharp
List<int> numbers = new List<int> { 1, 2, 3 };
int[] array = numbers.ToArray();
Console.WriteLine(string.Join(", ", array)); // Output: 1, 2, 3
```

---

### 17. **BinarySearch**  
Searches a sorted list using binary search.  
```csharp
List<int> numbers = new List<int> { 1, 2, 3 };
int index = numbers.BinarySearch(2);
Console.WriteLine(index); // Output: 1
```

---

### 18. **GetRange**  
Gets a range of elements from the list.  
```csharp
List<int> numbers = new List<int> { 1, 2, 3, 4, 5 };
List<int> range = numbers.GetRange(1, 3);
Console.WriteLine(string.Join(", ", range)); // Output: 2, 3, 4
```

---

### 19. **ForEach**  
Performs an action on each element.  
```csharp
List<int> numbers = new List<int> { 1, 2, 3 };
numbers.ForEach(n => Console.WriteLine(n * 2)); // Output: 2, 4, 6
```

---

These are some of the most commonly used methods of `List<T>` in C#. Let me know if you need more!
